# -*- coding: utf-8 -*-
from django.template import Template
from django.template.loader import get_template
from django.template import RequestContext
from django.http import HttpResponse, HttpResponseForbidden, HttpResponseRedirect
import json
from django.db.models.query import QuerySet
from django.db.models import Count
from django.conf import settings
from urllib import urlencode
from urllib2 import Request, urlopen, HTTPError, URLError
from ho600_ajax import controller, AJAXForbiddenError
from weblive.models import Place, FishingPort, Monitor, SyncLog, Account, Preset, AliveLog

from types import ListType
from random import randint
from md5 import md5
import httplib
from decimal import Decimal

import os, urllib, logging, datetime, time

if 'djangoappengine' not in settings.INSTALLED_APPS:
    memcache = False
else:
    try:
        from google.appengine.api import memcache
    except ImportError:
        memcache = False

def index(R, site_id='1'):
    from replay.views import _verify_key_from_fes, _get_monitor_hash
    t0 = time.time()

    allow_id = R.GET.get('allow', '')
    allow_id = allow_id if allow_id != '' else R.session.get('allow', '')
    ask_time_str = R.GET.get('now', '')
    ask_time_str = ask_time_str if ask_time_str != '' else R.session.get('ask_time_str', '')
    verify_key = R.GET.get('verify_key', '')
    verify_key = verify_key if verify_key != '' else R.session.get('verify_key', '')


    if allow_id == '' or ask_time_str == '' or verify_key == '':
        return HttpResponseRedirect('http://fes.fa.gov.tw/harbor/webcam/')
    result = _verify_key_from_fes(allow_id, ask_time_str, verify_key)
    if result == False:
        return HttpResponseRedirect('http://fes.fa.gov.tw/harbor/webcam/')

    hash = _get_monitor_hash(place_id=result)

    templat = get_template(os.path.join('weblive', 'index.html'))
    html = templat.render(RequestContext(R, {'hash': hash, 'cam_id': 0, 'site_id': site_id}))
    logging.info(time.time()-t0)

    R.session['allow'] = allow_id
    R.session['ask_time_str'] = ask_time_str
    R.session['verify_key'] = verify_key

    return HttpResponse(html)


def iAmAlive(R, **kw):
    try:
        uuid = R.GET.get('uuid', '')
        m = Monitor.objects.get(fes_id=kw['cam_fes_id'])
    except Monitor.DoesNotExist:
        pass
    else:
        if uuid:
            al = AliveLog(monitor=m, uuid=uuid)
            al.save()
    return HttpResponse('')


def showAliveLog(R, **kw):
    from replay.views import _get_monitor_hash
    hash = _get_monitor_hash()
    templat = get_template(os.path.join('weblive', 'show_alive_log.html'))
    html = templat.render(RequestContext(R, {'site_id': 1, 'hash': hash}))
    return HttpResponse(html)

@controller.register
def search_alive_log(R):
    after_time = R.POST.get('after_time', '')
    before_time = R.POST.get('before_time', '')
    try:
        after_time = datetime.datetime.strptime(after_time, '%Y-%m-%d %H:%M')
    except ValueError:
        after_time = datetime.datetime(2012, 2, 4, 0, 0)
    try:
        before_time = datetime.datetime.strptime(before_time, '%Y-%m-%d %H:%M')
    except ValueError:
        before_time = datetime.datetime.now()
    if after_time > before_time:
        after_time, before_time = before_time, after_time

    als = AliveLog.objects.filter(create_time__gte=after_time, create_time__lte=before_time
                             ).extra(select={"create_time": """DATE_FORMAT(create_time, '%%Y-%%m-%%d-%%H')"""}
                             ).values('monitor', 'create_time', 'uuid').annotate(Count('monitor__id'))
    monitor_keys = {}
    for a in als:
        try: monitor_keys[a['monitor']] += 1
        except KeyError:
            monitor_keys[a['monitor']] = 1
    monitors = []
    for k, v in monitor_keys.items():
        monitors.append({'monitor__id': k, 'count': v})

    return {'status': True,
            'after_time': after_time.strftime(u'%Y年%m月%d日 %H點%M分') if datetime.datetime(2012, 2, 4, 0, 0) != after_time else '',
            'before_time': before_time.strftime(u'%Y年%m月%d日 %H點%M分'),
            'days': (before_time-after_time).days,
            'monitors': monitors}


def showAliveCount(R, **kw):
    count = 0
    for m in Monitor.objects.filter(active=True):
        count += m.count_alive()
        if count > 20:
            break
    if count == 0: count = 1
    elif count > 20: count = '20+'
    js = """
function write_alive_count () {
    $('#alive_count').text(%s);
}
$(document).ready(function(){
    write_alive_count();
});""" % count
    return HttpResponse(js, content_type='text/javascript')


def catchCamImg(R, **kw):
    cam_id = int(kw['cam_id'])
    browser = kw['browser']
    cam, account, passwd = False, False, False
    Oaccount, Opasswd = False, False
    if cam_id:
        cam = Monitor.objects.get(id=cam_id)
        account = Account.objects.get(monitor=cam, type=3)
        account, passwd = account.account, account.passwd
        Oaccount = Account.objects.get(monitor=cam, type=2)
        Oaccount, Opasswd = Oaccount.account, Oaccount.passwd
    templat = get_template(os.path.join('weblive', 'monitor_img.html'))
    html = templat.render(RequestContext(R, {'cam': cam,
                            'account': account, 'passwd': passwd,
                            'Oaccount': Oaccount, 'Opasswd': Opasswd,
                            'browser': browser}))
    return HttpResponse(html)






MD5_key_name = '32iorweklfjdsfjeirj234r23r132'
URL = 'http://fes.fa.gov.tw/export_rows/'
def fetchRows(R, model_name):
    t0 = time.time()
    if model_name not in ['general_place', 'harbor_fishingport', 'monitor_monitor', 'monitor_account', 'monitor_preset']:
        return HttpResponseForbidden('has no model!', content_type='text/plain')
    else:
        if model_name == 'general_place':
            model = Place
        elif model_name == 'harbor_fishingport':
            model = FishingPort
        elif model_name == 'monitor_monitor':
            model = Monitor
        elif model_name == 'monitor_account':
            model = Account
        elif model_name == 'monitor_preset':
            model = Preset

    try: r = model.objects.all().order_by('-update_time')[0]
    except IndexError: update_time = ''
    else: update_time = r.update_time.strftime('%Y-%m-%d %H:%M:%S') if r.update_time else ''

    sl = SyncLog(model_name=model_name,
        maximal_update_time=r.update_time if update_time else None)
    sl.save()
    random_id = '%s'%randint(0, 1000000)
    post_data = {
        'model_name': model_name,
        'random_id': random_id,
        'key': md5(random_id+MD5_key_name+update_time).hexdigest(),
        'minimal_update_time': update_time,
    }

    post_data = urlencode([(str(key.encode('utf8')), str(post_data[key].encode('utf8')))
        for key in post_data.keys()])

    req = Request(URL)
    try:
        fd = urlopen(req, post_data, )
    except Exception, e:
        raise e

    content = fd.read()
    rows = json.loads(content)
    count = 0
    if model_name == 'general_place':
        for r in rows:
            count += _saveGeneralPlace(r)
    elif model_name == 'harbor_fishingport':
        for r in rows:
            count += _saveHarborFishingPort(r)
    elif model_name == 'monitor_monitor':
        for r in rows:
            count += _saveMonitorMonitor(r)
    elif model_name == 'monitor_account':
        for r in rows:
            count += _saveMonitorAccount(r)
    elif model_name == 'monitor_preset':
        for r in rows:
            count += _saveMonitorPreset(r)
    running_seconds = int(time.time()-t0)
    sl.count, sl.running_seconds = count, running_seconds
    sl.save()
    note = 'Done for %s records in %s seconds'%(count, running_seconds)
    return HttpResponse(note, content_type='text/plain')


SyncLogTemplate = Template("""<html><body>
<table border="1">
    <tr>
        <th>No.</th><th>model_name</th><th>count</th><th>running_seconds</th>
        <th>maximal_update_time</th><th>create_time</th><th>done_time</th>
    </tr>
    {% for sl in sync_logs %}
        <tr>
            <td>{{ forloop.counter }}</td><td>{{ sl.model_name }}</td>
            <td align="center">{{ sl.count }}</td>
            <td align="center">{{ sl.running_seconds }}</td>
            <td>{{ sl.maximal_update_time|date:"Y-m-d H:i:s" }}</td>
            <td>{{ sl.create_time|date:"Y-m-d H:i:s" }}</td>
            <td>{{ sl.done_time|date:"Y-m-d H:i:s" }}</td>
        </tr>
    {% endfor %}
</table>
</body></html>""")
def showSyncLog(R):
    sls = SyncLog.objects.all().order_by('-create_time')[:100]
    html = SyncLogTemplate.render(RequestContext(R, {'sync_logs': sls}))
    return HttpResponse(html)


def _saveGeneralPlace(row):
    update_time = datetime.datetime.strptime(row['update_time'], '%Y-%m-%d %H:%M:%S')
    try:
        parent = Place.objects.get(fes_id=int(row['uplevel_id']))
    except Place.DoesNotExist:
        logging.info(row['id'])
        logging.info(row['name'])
        logging.info(row['zipcode'])
        logging.info(row['uplevel_id'])
        logging.info(row['update_time'])
        logging.info('=============')
        return 0
    except TypeError:
        parent = None
    except ValueError:
        parent = None

    try:
        p = Place.objects.get(fes_id=row['id'])
    except Place.DoesNotExist:
        p = Place(fes_id=row['id'], name=row['name'], zipcode=row['zipcode'],
            parent=parent, update_time=update_time)
    else:
        p.fes_id = row['id']
        p.name = row['name']
        p.zipcode = row['zipcode']
        p.parent = parent
        p.update_time = update_time

    p.save()
    return 1


def _saveHarborFishingPort(row):
    update_time = datetime.datetime.strptime(row['update_time'], '%Y-%m-%d %H:%M:%S')
    row['xcoord'] = Decimal(row['xcoord']) if row['xcoord'] else None
    row['ycoord'] = Decimal(row['ycoord']) if row['ycoord'] else None
    try:
        place = Place.objects.get(fes_id=int(row['place_id']))
    except Place.DoesNotExist:
        logging.info('no place_id: %s' % row['place_id'])
        return 0
    except TypeError:
        logging.info('no place_id: %s' % row['place_id'])
        return 0
    except ValueError:
        logging.info('no place_id: %s' % row['place_id'])
        return 0

    try:
        f = FishingPort.objects.get(fes_id=row['id'])
    except FishingPort.DoesNotExist:
        f = FishingPort(fes_id=row['id'], name=row['name'], code=row['code'],
            xcoord=row['xcoord'], ycoord=row['ycoord'], place=place,
            update_time=update_time)
    else:
        f.fes_id = row['id']
        f.name = row['name']
        f.code = row['code']
        f.xcoord = row['xcoord']
        f.ycoord = row['ycoord']
        f.place = place
        f.update_time = update_time
    f.save()
    return 1


def _saveMonitorMonitor(row):
    update_time = datetime.datetime.strptime(row['update_time'], '%Y-%m-%d %H:%M:%S')
    row['lat'] = Decimal(row['lat']) if row['lat'] else None
    row['lng'] = Decimal(row['lng']) if row['lng'] else None
    try: place = Place.objects.get(fes_id=int(row['place_id']))
    except Place.DoesNotExist: place = None
    except TypeError: place = None
    except ValueError: place = None

    try: port = FishingPort.objects.get(fes_id=int(row['port_id']))
    except Place.DoesNotExist: port = None
    except TypeError: port = None
    except ValueError: port = None

    try:
        m = Monitor.objects.get(fes_id=row['id'])
    except Monitor.DoesNotExist:
        m = Monitor(fes_id=row['id'], machine_no=row['machine_no'], place=place, port=port,
            name=row['name'], location=row['location'], video_url=row['video_url'],
            lat=row['lat'], lng=row['lng'], ip=row['ip'], active=row['active'],
            update_time=update_time)
    else:
        m.fes_id=row['id']
        m.machine_no = row['machine_no']
        m.place = place
        m.port = port
        m.name = row['name']
        m.location = row['location']
        m.video_url = row['video_url']
        m.lat = row['lat']
        m.lng = row['lng']
        m.ip = row['ip']
        m.active = row['active']
        m.update_time = update_time
    m.save()
    return 1


def _saveMonitorAccount(row):
    update_time = datetime.datetime.strptime(row['update_time'], '%Y-%m-%d %H:%M:%S')
    try: monitor = Monitor.objects.get(fes_id=int(row['monitor_id']))
    except Monitor.DoesNotExist: monitor = None
    except TypeError: monitor = None
    except ValueError: monitor = None

    try:
        R = Account.objects.get(fes_id=row['id'])
    except Account.DoesNotExist:
        R = Account(fes_id=row['id'], monitor=monitor,
                    account=row['account'], passwd=row['passwd'],
                    type=int(row['type_id']), update_time=update_time)
    else:
        R.fes_id = row['id']
        R.monitor = monitor
        R.account = row['account']
        R.passwd = row['passwd']
        R.type = int(row['type_id'])
        R.update_time = update_time
    R.save()
    return 1


def _saveMonitorPreset(row):
    update_time = datetime.datetime.strptime(row['update_time'], '%Y-%m-%d %H:%M:%S')
    try: monitor = Monitor.objects.get(fes_id=int(row['monitor_id']))
    except Monitor.DoesNotExist: monitor = None
    except TypeError: monitor = None
    except ValueError: monitor = None

    try:
        R = Preset.objects.get(fes_id=row['id'])
    except Preset.DoesNotExist:
        R = Preset(fes_id=row['id'], monitor=monitor,
                    name=row['name'], no=row['no'], update_time=update_time)
    else:
        R.fes_id = row['id']
        R.monitor = monitor
        R.name = row['name']
        R.no = row['no']
        R.update_time = update_time
    R.save()
    return 1

# ////================================ following are AJAX function area ================================//// #

@controller.register
def getPortByPlace(R):
    place_id = R.DATA.get('place_id', '')
    port_list = []
    if place_id != '':
        for m in Monitor.objects.filter(place__id=int(place_id), active=True):
            if m.port not in port_list: port_list.append(m.port)
    selection_area_id = 'port'
    selection_note = '請選擇港埠　'
    templat = get_template(os.path.join('weblive', 'selection_template.html'))
    content = templat.render(RequestContext(R, {'selection_area_id': selection_area_id, 'selection_note': selection_note, 'selection_list': port_list, 'only': len(port_list)}))
    return {'status': True, 'content': content}


@controller.register
def getCamByPort(R):
    port_id = R.DATA.get('port_id', '')
    cam_list = []
    if port_id != '':
        for m in Monitor.objects.filter(port__id=int(port_id), active=True):
            if m not in cam_list: cam_list.append(m)
    selection_area_id = 'cam'
    selection_note = u'請選擇攝影機　'
    templat = get_template(os.path.join('weblive', 'selection_template.html'))
    content = templat.render(RequestContext(R, {'selection_area_id': selection_area_id, 'selection_note': selection_note, 'selection_list': cam_list, 'only': len(cam_list)}))
    return {'status': True, 'content': content}


@controller.register
def getDataByCam(R):
    cam_id = R.DATA.get('cam_id', '')
    browser = R.DATA.get('browser', '')

    cam = Monitor.objects.get(id=int(cam_id))
    url = '/weblive/camimg/%s/%s' % (browser, cam_id)
    if cam.name == cam.location:
        note = '%s - %s - %s' % (cam.place.name, cam.port.name, cam.name)
    else:
        note = '%s - %s - %s ( %s )' % (cam.place.name, cam.port.name, cam.name, cam.location)
    account = Account.objects.get(monitor=cam, type=2)
    login = '%s:%s' % (account.account, account.passwd)

    preset_list = False
    if memcache:
        preset_list = memcache.get('preset_list_%s'%cam.id)
    if not preset_list:
        preset_list = Preset.objects.filter(monitor=cam)
        if memcache:
            preset_list = memcache.set('preset_list_%s'%cam.id, preset_list, 3600)
    if type(preset_list) in [ListType, QuerySet]:
        for preset in preset_list: preset.id = preset.no
    else:
        preset_list = []

    selection_area_id = 'preset'
    selection_note = u'請選擇預設場景　'
    templat = get_template(os.path.join('weblive', 'selection_template.html'))
    preset = templat.render(RequestContext(R, {'selection_area_id': selection_area_id,
        'selection_note': selection_note, 'selection_list': preset_list}))
    quality_list = [{'id': 0, 'name': u'影像品質 - 高　'}, {'id': 2, 'name': u'影像品質 - 中等'}, {'id': 4, 'name': u'影像品質 - 低'}]
    selection_area_id = 'quality'
    selection_note = False
    default = 2
    templat = get_template(os.path.join('weblive', 'selection_template.html'))
    quality = templat.render(RequestContext(R, {'selection_area_id': selection_area_id, 'selection_note': selection_note, 'selection_list': quality_list, 'default': default}))
    return {'status': True, 'url': url, 'ip': cam.ip, 'note': note,
            'machine_no': cam.machine_no,
            'login': login, 'preset': preset, 'quality': quality}


#@controller.register
#def getSceneByPreset(R):

def list_get_video_args(seconds=300, directory='', BE3204_username='fesview', proxy='', get_video_path=''):
    if directory and directory[0] != '/':
        raise ValueError(u'"directory" must be a absolute path')

    for m in Monitor.objects.filter(machine_no='BE3204').order_by('fes_id'):
        d = {
            'get_video_path': get_video_path,
            'proxy': proxy,
            'seconds': seconds,
            'tmp_filename': os.path.join(directory, '%s.tmp'%m.fes_id),
            'filename': os.path.join(directory, '%s.mjpg'%m.fes_id),
            'username': BE3204_username,
            'password': m.account_set.get(account=BE3204_username).passwd,
            'ip': m.ip,
            'camera_id': m.fes_id,
            'type': 'BE3204',
        }
        if get_video_path:
            #INFO 用 get_video 去跑
            logging.info('%(get_video_path)s %(camera_id)s %(username)s %(password)s %(ip)s %(seconds)s %(type)s %(proxy)s'%d)
            pass
        else:
            #INFO 自己跑 shell
            logging.info('/usr/bin/timeout %(seconds)ss /usr/bin/mplayer -dumpstream -dumpfile %(tmp_filename)s %(proxy)shttp://%(username)s:%(password)s@%(ip)s/ipcam/mjpeg.cgi > /dev/null 2>&1 ; mv %(tmp_filename)s %(filename)s'%d)


def list_get_pelcod_video_args(seconds=300, directory='', username='fesview', proxy='', get_video_path=''):
    if directory and directory[0] != '/':
        raise ValueError(u'"directory" must be a absolute path')

    for m in Monitor.objects.filter(machine_no='PELCO-D').order_by('fes_id'):
        d = {
            'get_video_path': get_video_path,
            'proxy': proxy,
            'seconds': seconds,
            'filename': os.path.join(directory, '%s.mp4'%m.fes_id),
            'username': username,
            'password': m.account_set.get(account=username).passwd,
            'ip': m.ip,
            'camera_id': m.fes_id,
            'type': 'PELCO-D',
        }
        if get_video_path:
            #INFO 用 get_video 去跑
            logging.info('%(get_video_path)s %(camera_id)s %(username)s %(password)s %(ip)s %(seconds)s %(type)s %(proxy)s'%d)
            pass
        else:
            #INFO 自己跑 shell
            if proxy:
                logging.info('/usr/bin/timeout %(seconds)ss /usr/bin/cvlc --sout %(filename)s --http-proxy=%(proxy)s rtsp://%(username)s:%(password)s@%(ip)s/ > /dev/null 2>&1'%d)
            else:
                logging.info('/usr/bin/timeout %(seconds)ss /usr/bin/cvlc -sout %(filename)s rtsp://%(username)s:%(password)s@%(ip)s/ > /dev/null 2>&1'%d)


def change_camera_name(R, action, camera_id):
    try: from control_camera.views import simple_verify
    except ImportError: return HttpResponse('')

    key = R.GET.get('key', '')
    request_time_str = R.GET.get('request_time_str', '')
    verify = R.GET.get('verify', '')
    if verify and verify == simple_verify(key, request_time_str):
        pass
    else:
        return HttpResponse('')

    try:
        cam = Monitor.objects.get(fes_id=camera_id)
    except Monitor.DoesNotExist:
        return HttpResponse('')
    else:
        if u'停止使用' not in cam.name:
            if action == 'start':
                if u'暫停錄影' in cam.name:
                    cam.name = cam.name.replace(u'(暫停錄影)', '')
                    cam.save()
            elif action == 'stop':
                if u'暫停錄影' not in cam.name:
                    cam.name += u'(暫停錄影)'
                    cam.save()
            else:
                return HttpResponse('')

            if memcache:
                memcache.set('monitor_hash', {})
    return HttpResponse('')


def rMjpeg(R, camera_id):
    try: cam = Monitor.objects.get(id=camera_id)
    except Monitor.DoesNotExist: return HttpResponse('')

    if cam.machine_no == "BE3204": tail = "ipcam/mjpeg.cgi"
    elif cam.machine_no == "PELCO-D": tail = "GetData.cgi?CH=1"
    else: return HttpResponse('')

    try: viewer = Account.objects.get(monitor=cam, type=3)
    except Account.DoesNotExist: return HttpResponse('')

    return HttpResponseRedirect("http://%s:%s@%s/%s" % (viewer.account, viewer.passwd, cam.ip, tail))
